*submode.txt*					       create your own submode

==============================================================================
Table of Contents                                  *submode-table-of-contents*

1. Before start                                         |submode-before-start|
2. Requirement                                           |submode-requirement|
3. Introduction						|submode-introduction|
4. Usage                                                       |submode-usage|

==============================================================================
Before start                                            *submode-before-start*

This plugin is highly experimental plugin, so anything will change while
developing this plugin. If you want to use this plugin in daily works, I
recommend you to check commit message.

==============================================================================
Requirement                                              *submode-requirement*

This plugin requires neovim >= 0.8 if you want to use lua function at {rhs} of
register. Because this plugin using mapset/maparg internally and it dosen't
support key mappings which rhs is lua function if neovim < 0.8.

==============================================================================
Introduction                                            *submode-introduction*

I thought it is so convenient if I can change some key mappings with one
(or more) keys like we change mode. This plugin maybe good for someone who
thought similar things before.

==============================================================================
Usage                                                          *submode-usage*

At first, import submode and call setup function once.
>
    local submode = require("submode")
    submode:setup()
<
Then, create mode
>
    submode:create("name-of-submode", {
        mode = "parent-mode",
        enter = "keys-to-enter-this-submode",
        leave = "keys-to-leave-from-this-submode", -- this is optional
                                                   -- see below
        --enter = { "key1", "key2", ... } -- you can pass multiple key
        --leave = { "key1", "key2", ... } 
    })
<
Finally, register mappings to submode
>
    submode:register("name-of-submode", {
        lhs = "keys-to-register",
        rhs = "behavior-of-this-mapping",
        --rhs = function() --[[you can pass lua function]] end
        --opt = {} -- also, you can pass opt which vim.keymap.set can recieve
                   -- This is optional
    })
<
If you want, you can register leave key instead add key to {leave} of create.
>
    submode:register("name-of-submode", {
        lhs = "keys-to-leave-from-this-submode",
        rhs = function()
            -- processes to do before exit this submode
            self:leave()
        end
    })
<
You can exit from submode by pressing registered leave key, or simply change
parent mode (e.g. Parent mode is insert mode -> press ':')

If you want to show current submode to statusline, you can get current
submode's name via mode method
>
    submode:mode() -- This will return current submode's name, or nil if not
                   -- in submode
<
vim:tw=78:ts=8:ft=help:norl:noet:
