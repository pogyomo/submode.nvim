*submode.txt*                                          create your own submode

==============================================================================
Table of Contents                                  *submode-table-of-contents*

1. Before start                                         |submode-before-start|
2. Requirement                                           |submode-requirement|
3. Introduction                                         |submode-introduction|
4. Installation                                         |submode-installation|
5. Usage                                                       |submode-usage|
6. Methods                                                   |submode-methods|

==============================================================================
Before start                                            *submode-before-start*

This plugin is highly experimental plugin, so anything will change while
developing this plugin. If you want to use this plugin in daily works, I
recommend you to check commit message.

==============================================================================
Requirement                                              *submode-requirement*

This plugin requires neovim >= 0.8 if you want to use lua function at {rhs} of
register. Because this plugin using mapset/maparg internally and it dosen't
support key mappings which rhs is lua function if neovim < 0.8.

==============================================================================
Introduction                                            *submode-introduction*

I thought it is so convenient if I can change some key mappings with one
(or more) keys like we change mode. This plugin maybe good for someone who
thought similar things before.

==============================================================================
Installation                                            *submode-installation*

Use your favorite plugin manager.

vim-plug ~
>lua
    Plug "pogyomo/submode.nvim"
<
packer.nvim ~
>lua
    use("pogyomo/submode.nvim")
<
==============================================================================
Usage                                                          *submode-usage*

At first, import submode and call setup function once.
>lua
    local submode = require("submode")
    -- simply call setup
    submode:setup()
    -- you can pass config
    --submode:setup{
    --    leave_when_mode_changed = true
    --}
<
Then, create mode
>lua
    submode:create("name-of-submode", {
        mode = "parent-mode",
        enter = "keys-to-enter-this-submode",
        leave = "keys-to-leave-from-this-submode", -- this is optional
                                                   -- see below
        --enter = { "key1", "key2", ... } -- you can pass multiple key
        --leave = { "key1", "key2", ... } 
    })
<
Finally, register mappings to submode
>lua
    submode:register("name-of-submode", {
        lhs = "keys-to-register",
        rhs = "behavior-of-this-mapping",
        --rhs = function() --[[you can pass lua function]] end
        --opt = {} -- also, you can pass opt which vim.keymap.set can recieve
                   -- This is optional
    })
<
If you want, you can register leave key instead add key to {leave} of create.
>lua
    submode:register("name-of-submode", {
        lhs = "keys-to-leave-from-this-submode",
        rhs = function()
            -- processes to do before exit this submode
            submode:leave()
        end
    })
<
You can exit from submode by pressing registered leave key, or simply change
parent mode (if leave_when_mode_changed is true).

Also, you can enter submode by calling |enter()| method with the name of
submode.

If you want to show current submode to statusline, you can get current
submode's name via mode method
>lua
    submode:mode() -- This will return current submode's name, or nil if not
                   -- in submode
<
==============================================================================
Methods                                                      *submode-methods*

You can call these methods either submode:method(param...) or
submode.method(submode, param...).

setup({submode} [, {config}])                                *submode.setup()*
    Initialize this plugin.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.
        {config}  Config of the submode with following keys.
                  - leave_when_mode_changed (boolean): Whether leave from
                  current submode or not when mode is changed. Default is
                  false.
                  - when_mapping_exist (string): Behavior when mapping
                  already exist. Accept following strings.
                      - "error": Throw error. This is default.
                      - "keep": Keep current mapping.
                      - "override": Override old mapping.
                  - when_submode_exist (string): Behavior when submode
                  already exist. Accept following strings.
                      - "error": Throw error. This is default.
                      - "keep": Keep current submode.
                      - "override": Override old submode.

    Return: ~
        nil

create({submode}, {name}, {info}, {map} ...)                *submode.create()*
    Create a new submode.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.
        {name}    (string) Name of submode.
        {info}    Infomation of this submode with following keys.
                  - mode (string): Parent mode. See {mode} of |maparg()|
                  - enter (string | string[]) optional: keymaps to enter this
                  submode.
                  - leave (string | string[]) optional: keymaps to leave from
                  this submode.
                  - enter_cb (function) optional: Callback which will be
                  called when enter submode.
                  - leave_cb (function) optional: Callback which will be
                  called when leave from submode.
        {map}     Mapping infomations. Same {map} in |submode.register()|.

    Return: ~
        nil

register({submode}, {name}, {map} ...)                    *submode.register()*
    Register mapping to submode.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.
        {name}    (string) Name of submode.
        {map}     Mapping infomation to register with following keys.
                  - lhs (string | string[]): keys to enter this submode.
                  - rhs (string | fun(lhs: string):string?): Behavior of this
                  keymap.
                  - opts (table) optional: Options of this keymap. See {opts}
                  of |vim.keymap.set()|.

    Return: ~
        nil

enter({submode}, {name}, {opts})                             *submode.enter()*
    Enter the submode. This function only success if parent mode of the
    submode is same as current mode.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.
        {name}    (string) Name of submode.
        {opts}    Options with following keys. This is optional.
                  - callback (function) optional: Callback which will be
                  called when enter submode.

    Return: ~
        nil

leave({submode}, {opts})                                     *submode.leave()*
    Leave from current submode.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.
        {opts}    Options with following keys. This is optional.
                  - callback (function) optional: Callback which will be
                  called when leave from submode.

    Return: ~
        nil

mode({submode})                                               *submode.mode()*
    Get current submode's name if possible.

    Parameters: ~
        {submode} Submode instance that require("submode") returns.

    Return: ~
        string, or nil if not in submode or submode's parent is not same as
        current mode.

vim:tw=78:ts=8:ft=help:norl:noet:
